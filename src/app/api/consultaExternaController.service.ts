/**
 * Proyecto TDS Backend
 * Descripci√≥n
 *
 * OpenAPI spec version: 2.0
 * Contact: info@tecazuay.edu.ec
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ConsultaExterna } from '../model/consultaExterna';
import { GenericResponseConsultaExternaByIdDTO } from '../model/genericResponseConsultaExternaByIdDTO';
import { GenericResponseListConstExternaListDTO } from '../model/genericResponseListConstExternaListDTO';
import { GenericResponseint } from '../model/genericResponseint';
import { GenericResponsestring } from '../model/genericResponsestring';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ConsultaExternaControllerService {

    protected basePath = '//localhost:8080/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * comprobarHistoriaClinica
     * 
     * @param historiaClinica historiaClinica
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public comprobarHistoriaClinicaUsingGET(historiaClinica?: number, observe?: 'body', reportProgress?: boolean): Observable<GenericResponseint>;
    public comprobarHistoriaClinicaUsingGET(historiaClinica?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponseint>>;
    public comprobarHistoriaClinicaUsingGET(historiaClinica?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponseint>>;
    public comprobarHistoriaClinicaUsingGET(historiaClinica?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (historiaClinica !== undefined && historiaClinica !== null) {
            queryParameters = queryParameters.set('historiaClinica', <any>historiaClinica);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponseint>('get',`${this.basePath}/consultaExterna/comprobarHistoriaClinica`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * generarPdf
     * 
     * @param idConExt idConExt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generarPdfUsingGET1(idConExt?: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public generarPdfUsingGET1(idConExt?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public generarPdfUsingGET1(idConExt?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public generarPdfUsingGET1(idConExt?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/consultaExterna/generarPdf`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getConsultaExternaById
     * 
     * @param idConExt idConExt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConsultaExternaByIdUsingGET(idConExt?: number, observe?: 'body', reportProgress?: boolean): Observable<GenericResponseConsultaExternaByIdDTO>;
    public getConsultaExternaByIdUsingGET(idConExt?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponseConsultaExternaByIdDTO>>;
    public getConsultaExternaByIdUsingGET(idConExt?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponseConsultaExternaByIdDTO>>;
    public getConsultaExternaByIdUsingGET(idConExt?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponseConsultaExternaByIdDTO>('get',`${this.basePath}/consultaExterna/getConsultaExternaById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getConsultaExterna
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConsultaExternaUsingGET(observe?: 'body', reportProgress?: boolean): Observable<GenericResponseListConstExternaListDTO>;
    public getConsultaExternaUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponseListConstExternaListDTO>>;
    public getConsultaExternaUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponseListConstExternaListDTO>>;
    public getConsultaExternaUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponseListConstExternaListDTO>('get',`${this.basePath}/consultaExterna/getConsultaExterna`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getMaxHistoriaClinica
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMaxHistoriaClinicaUsingGET(observe?: 'body', reportProgress?: boolean): Observable<GenericResponseint>;
    public getMaxHistoriaClinicaUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponseint>>;
    public getMaxHistoriaClinicaUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponseint>>;
    public getMaxHistoriaClinicaUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponseint>('get',`${this.basePath}/consultaExterna/getMaxHistoriaClinica`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveConsultaExterna
     * 
     * @param body consultaExterna
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveConsultaExternaUsingPOST(body: ConsultaExterna, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public saveConsultaExternaUsingPOST(body: ConsultaExterna, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public saveConsultaExternaUsingPOST(body: ConsultaExterna, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public saveConsultaExternaUsingPOST(body: ConsultaExterna, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveConsultaExternaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GenericResponsestring>('post',`${this.basePath}/consultaExterna/saveConsultaExterna`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAntecedentesFamiliares
     * 
     * @param cancer cancer
     * @param cardiopatia cardiopatia
     * @param diabetes diabetes
     * @param enfCardio enfCardio
     * @param enfInfec enfInfec
     * @param enfMental enfMental
     * @param familiares familiares
     * @param hipertension hipertension
     * @param idConExt idConExt
     * @param malformaciones malformaciones
     * @param otros otros
     * @param tuberculosis tuberculosis
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAntecedentesFamiliaresUsingPUT(cancer?: boolean, cardiopatia?: boolean, diabetes?: boolean, enfCardio?: boolean, enfInfec?: boolean, enfMental?: boolean, familiares?: string, hipertension?: boolean, idConExt?: number, malformaciones?: boolean, otros?: boolean, tuberculosis?: boolean, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateAntecedentesFamiliaresUsingPUT(cancer?: boolean, cardiopatia?: boolean, diabetes?: boolean, enfCardio?: boolean, enfInfec?: boolean, enfMental?: boolean, familiares?: string, hipertension?: boolean, idConExt?: number, malformaciones?: boolean, otros?: boolean, tuberculosis?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateAntecedentesFamiliaresUsingPUT(cancer?: boolean, cardiopatia?: boolean, diabetes?: boolean, enfCardio?: boolean, enfInfec?: boolean, enfMental?: boolean, familiares?: string, hipertension?: boolean, idConExt?: number, malformaciones?: boolean, otros?: boolean, tuberculosis?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateAntecedentesFamiliaresUsingPUT(cancer?: boolean, cardiopatia?: boolean, diabetes?: boolean, enfCardio?: boolean, enfInfec?: boolean, enfMental?: boolean, familiares?: string, hipertension?: boolean, idConExt?: number, malformaciones?: boolean, otros?: boolean, tuberculosis?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {













        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cancer !== undefined && cancer !== null) {
            queryParameters = queryParameters.set('cancer', <any>cancer);
        }
        if (cardiopatia !== undefined && cardiopatia !== null) {
            queryParameters = queryParameters.set('cardiopatia', <any>cardiopatia);
        }
        if (diabetes !== undefined && diabetes !== null) {
            queryParameters = queryParameters.set('diabetes', <any>diabetes);
        }
        if (enfCardio !== undefined && enfCardio !== null) {
            queryParameters = queryParameters.set('enfCardio', <any>enfCardio);
        }
        if (enfInfec !== undefined && enfInfec !== null) {
            queryParameters = queryParameters.set('enfInfec', <any>enfInfec);
        }
        if (enfMental !== undefined && enfMental !== null) {
            queryParameters = queryParameters.set('enfMental', <any>enfMental);
        }
        if (familiares !== undefined && familiares !== null) {
            queryParameters = queryParameters.set('familiares', <any>familiares);
        }
        if (hipertension !== undefined && hipertension !== null) {
            queryParameters = queryParameters.set('hipertension', <any>hipertension);
        }
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }
        if (malformaciones !== undefined && malformaciones !== null) {
            queryParameters = queryParameters.set('malformaciones', <any>malformaciones);
        }
        if (otros !== undefined && otros !== null) {
            queryParameters = queryParameters.set('otros', <any>otros);
        }
        if (tuberculosis !== undefined && tuberculosis !== null) {
            queryParameters = queryParameters.set('tuberculosis', <any>tuberculosis);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/consultaExterna/updateAntecedentesFamiliares`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAntecedentesPersonales
     * 
     * @param clinicos clinicos
     * @param idConExt idConExt
     * @param quirurgicos quirurgicos
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAntecedentesPersonalesUsingPUT(clinicos?: string, idConExt?: number, quirurgicos?: string, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateAntecedentesPersonalesUsingPUT(clinicos?: string, idConExt?: number, quirurgicos?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateAntecedentesPersonalesUsingPUT(clinicos?: string, idConExt?: number, quirurgicos?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateAntecedentesPersonalesUsingPUT(clinicos?: string, idConExt?: number, quirurgicos?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (clinicos !== undefined && clinicos !== null) {
            queryParameters = queryParameters.set('clinicos', <any>clinicos);
        }
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }
        if (quirurgicos !== undefined && quirurgicos !== null) {
            queryParameters = queryParameters.set('quirurgicos', <any>quirurgicos);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/consultaExterna/updateAntecedentesPersonales`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateConsultaExterna
     * 
     * @param enfActual enfActual
     * @param fecha fecha
     * @param durConsulta durConsulta
     * @param establecimiento establecimiento
     * @param idConExt idConExt
     * @param motConsulta motConsulta
     * @param nombreProfesional nombreProfesional
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateConsultaExternaUsingPUT(enfActual: string, fecha: Date, durConsulta?: string, establecimiento?: string, idConExt?: number, motConsulta?: string, nombreProfesional?: string, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateConsultaExternaUsingPUT(enfActual: string, fecha: Date, durConsulta?: string, establecimiento?: string, idConExt?: number, motConsulta?: string, nombreProfesional?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateConsultaExternaUsingPUT(enfActual: string, fecha: Date, durConsulta?: string, establecimiento?: string, idConExt?: number, motConsulta?: string, nombreProfesional?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateConsultaExternaUsingPUT(enfActual: string, fecha: Date, durConsulta?: string, establecimiento?: string, idConExt?: number, motConsulta?: string, nombreProfesional?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (enfActual === null || enfActual === undefined) {
            throw new Error('Required parameter enfActual was null or undefined when calling updateConsultaExternaUsingPUT.');
        }

        if (fecha === null || fecha === undefined) {
            throw new Error('Required parameter fecha was null or undefined when calling updateConsultaExternaUsingPUT.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (durConsulta !== undefined && durConsulta !== null) {
            queryParameters = queryParameters.set('durConsulta', <any>durConsulta);
        }
        if (enfActual !== undefined && enfActual !== null) {
            queryParameters = queryParameters.set('enfActual', <any>enfActual);
        }
        if (establecimiento !== undefined && establecimiento !== null) {
            queryParameters = queryParameters.set('establecimiento', <any>establecimiento);
        }
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha.toISOString());
        }
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }
        if (motConsulta !== undefined && motConsulta !== null) {
            queryParameters = queryParameters.set('motConsulta', <any>motConsulta);
        }
        if (nombreProfesional !== undefined && nombreProfesional !== null) {
            queryParameters = queryParameters.set('nombreProfesional', <any>nombreProfesional);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/consultaExterna/updateConsultaExterna`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateDiagnostico
     * 
     * @param cie cie
     * @param desDiag desDiag
     * @param desPreDef desPreDef
     * @param desPreDefCie desPreDefCie
     * @param desPreDefPreDef desPreDefPreDef
     * @param idConExt idConExt
     * @param preDef preDef
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDiagnosticoUsingPUT(cie?: string, desDiag?: string, desPreDef?: string, desPreDefCie?: string, desPreDefPreDef?: string, idConExt?: number, preDef?: string, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateDiagnosticoUsingPUT(cie?: string, desDiag?: string, desPreDef?: string, desPreDefCie?: string, desPreDefPreDef?: string, idConExt?: number, preDef?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateDiagnosticoUsingPUT(cie?: string, desDiag?: string, desPreDef?: string, desPreDefCie?: string, desPreDefPreDef?: string, idConExt?: number, preDef?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateDiagnosticoUsingPUT(cie?: string, desDiag?: string, desPreDef?: string, desPreDefCie?: string, desPreDefPreDef?: string, idConExt?: number, preDef?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cie !== undefined && cie !== null) {
            queryParameters = queryParameters.set('cie', <any>cie);
        }
        if (desDiag !== undefined && desDiag !== null) {
            queryParameters = queryParameters.set('desDiag', <any>desDiag);
        }
        if (desPreDef !== undefined && desPreDef !== null) {
            queryParameters = queryParameters.set('desPreDef', <any>desPreDef);
        }
        if (desPreDefCie !== undefined && desPreDefCie !== null) {
            queryParameters = queryParameters.set('desPreDefCie', <any>desPreDefCie);
        }
        if (desPreDefPreDef !== undefined && desPreDefPreDef !== null) {
            queryParameters = queryParameters.set('desPreDefPreDef', <any>desPreDefPreDef);
        }
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }
        if (preDef !== undefined && preDef !== null) {
            queryParameters = queryParameters.set('preDef', <any>preDef);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/consultaExterna/updateDiagnostico`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateEstadoConsultaExterna
     * 
     * @param idConExt idConExt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEstadoConsultaExternaUsingPUT(idConExt?: number, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateEstadoConsultaExternaUsingPUT(idConExt?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateEstadoConsultaExternaUsingPUT(idConExt?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateEstadoConsultaExternaUsingPUT(idConExt?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/consultaExterna/updateEstadoConsultaExterna`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateExamenFisicoRegional
     * 
     * @param abdomen abdomen
     * @param cabeza cabeza
     * @param cuello cuello
     * @param extremidades extremidades
     * @param idConExt idConExt
     * @param observaciones observaciones
     * @param pelvis pelvis
     * @param torax torax
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateExamenFisicoRegionalUsingPUT(abdomen?: string, cabeza?: string, cuello?: string, extremidades?: string, idConExt?: number, observaciones?: string, pelvis?: string, torax?: string, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateExamenFisicoRegionalUsingPUT(abdomen?: string, cabeza?: string, cuello?: string, extremidades?: string, idConExt?: number, observaciones?: string, pelvis?: string, torax?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateExamenFisicoRegionalUsingPUT(abdomen?: string, cabeza?: string, cuello?: string, extremidades?: string, idConExt?: number, observaciones?: string, pelvis?: string, torax?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateExamenFisicoRegionalUsingPUT(abdomen?: string, cabeza?: string, cuello?: string, extremidades?: string, idConExt?: number, observaciones?: string, pelvis?: string, torax?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (abdomen !== undefined && abdomen !== null) {
            queryParameters = queryParameters.set('abdomen', <any>abdomen);
        }
        if (cabeza !== undefined && cabeza !== null) {
            queryParameters = queryParameters.set('cabeza', <any>cabeza);
        }
        if (cuello !== undefined && cuello !== null) {
            queryParameters = queryParameters.set('cuello', <any>cuello);
        }
        if (extremidades !== undefined && extremidades !== null) {
            queryParameters = queryParameters.set('extremidades', <any>extremidades);
        }
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }
        if (observaciones !== undefined && observaciones !== null) {
            queryParameters = queryParameters.set('observaciones', <any>observaciones);
        }
        if (pelvis !== undefined && pelvis !== null) {
            queryParameters = queryParameters.set('pelvis', <any>pelvis);
        }
        if (torax !== undefined && torax !== null) {
            queryParameters = queryParameters.set('torax', <any>torax);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/consultaExterna/updateExamenFisicoRegional`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateRevisionOrganosSentido
     * 
     * @param cardiovascular cardiovascular
     * @param descripcion descripcion
     * @param digestivo digestivo
     * @param endocrino endocrino
     * @param genital genital
     * @param hemolenfatico hemolenfatico
     * @param idConExt idConExt
     * @param musEsq musEsq
     * @param nervioso nervioso
     * @param orgSen orgSen
     * @param respiratorio respiratorio
     * @param urinario urinario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRevisionOrganosSentidoUsingPUT(cardiovascular?: string, descripcion?: string, digestivo?: string, endocrino?: string, genital?: string, hemolenfatico?: string, idConExt?: number, musEsq?: string, nervioso?: string, orgSen?: string, respiratorio?: string, urinario?: string, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateRevisionOrganosSentidoUsingPUT(cardiovascular?: string, descripcion?: string, digestivo?: string, endocrino?: string, genital?: string, hemolenfatico?: string, idConExt?: number, musEsq?: string, nervioso?: string, orgSen?: string, respiratorio?: string, urinario?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateRevisionOrganosSentidoUsingPUT(cardiovascular?: string, descripcion?: string, digestivo?: string, endocrino?: string, genital?: string, hemolenfatico?: string, idConExt?: number, musEsq?: string, nervioso?: string, orgSen?: string, respiratorio?: string, urinario?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateRevisionOrganosSentidoUsingPUT(cardiovascular?: string, descripcion?: string, digestivo?: string, endocrino?: string, genital?: string, hemolenfatico?: string, idConExt?: number, musEsq?: string, nervioso?: string, orgSen?: string, respiratorio?: string, urinario?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {













        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cardiovascular !== undefined && cardiovascular !== null) {
            queryParameters = queryParameters.set('cardiovascular', <any>cardiovascular);
        }
        if (descripcion !== undefined && descripcion !== null) {
            queryParameters = queryParameters.set('descripcion', <any>descripcion);
        }
        if (digestivo !== undefined && digestivo !== null) {
            queryParameters = queryParameters.set('digestivo', <any>digestivo);
        }
        if (endocrino !== undefined && endocrino !== null) {
            queryParameters = queryParameters.set('endocrino', <any>endocrino);
        }
        if (genital !== undefined && genital !== null) {
            queryParameters = queryParameters.set('genital', <any>genital);
        }
        if (hemolenfatico !== undefined && hemolenfatico !== null) {
            queryParameters = queryParameters.set('hemolenfatico', <any>hemolenfatico);
        }
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }
        if (musEsq !== undefined && musEsq !== null) {
            queryParameters = queryParameters.set('musEsq', <any>musEsq);
        }
        if (nervioso !== undefined && nervioso !== null) {
            queryParameters = queryParameters.set('nervioso', <any>nervioso);
        }
        if (orgSen !== undefined && orgSen !== null) {
            queryParameters = queryParameters.set('orgSen', <any>orgSen);
        }
        if (respiratorio !== undefined && respiratorio !== null) {
            queryParameters = queryParameters.set('respiratorio', <any>respiratorio);
        }
        if (urinario !== undefined && urinario !== null) {
            queryParameters = queryParameters.set('urinario', <any>urinario);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/consultaExterna/updateRevisionOrganosSentido`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateSignosVitales
     * 
     * @param fechaMed fechaMed
     * @param freResp freResp
     * @param idConExt idConExt
     * @param peso peso
     * @param preArt preArt
     * @param pulso pulso
     * @param talla talla
     * @param temp temp
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSignosVitalesUsingPUT(fechaMed: Date, freResp?: number, idConExt?: number, peso?: number, preArt?: string, pulso?: number, talla?: number, temp?: number, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateSignosVitalesUsingPUT(fechaMed: Date, freResp?: number, idConExt?: number, peso?: number, preArt?: string, pulso?: number, talla?: number, temp?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateSignosVitalesUsingPUT(fechaMed: Date, freResp?: number, idConExt?: number, peso?: number, preArt?: string, pulso?: number, talla?: number, temp?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateSignosVitalesUsingPUT(fechaMed: Date, freResp?: number, idConExt?: number, peso?: number, preArt?: string, pulso?: number, talla?: number, temp?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fechaMed === null || fechaMed === undefined) {
            throw new Error('Required parameter fechaMed was null or undefined when calling updateSignosVitalesUsingPUT.');
        }








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fechaMed !== undefined && fechaMed !== null) {
            queryParameters = queryParameters.set('fechaMed', <any>fechaMed.toISOString());
        }
        if (freResp !== undefined && freResp !== null) {
            queryParameters = queryParameters.set('freResp', <any>freResp);
        }
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }
        if (peso !== undefined && peso !== null) {
            queryParameters = queryParameters.set('peso', <any>peso);
        }
        if (preArt !== undefined && preArt !== null) {
            queryParameters = queryParameters.set('preArt', <any>preArt);
        }
        if (pulso !== undefined && pulso !== null) {
            queryParameters = queryParameters.set('pulso', <any>pulso);
        }
        if (talla !== undefined && talla !== null) {
            queryParameters = queryParameters.set('talla', <any>talla);
        }
        if (temp !== undefined && temp !== null) {
            queryParameters = queryParameters.set('temp', <any>temp);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/consultaExterna/updateSignosVitales`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateTratamiento
     * 
     * @param c c
     * @param i i
     * @param idConExt idConExt
     * @param l l
     * @param m m
     * @param o o
     * @param r r
     * @param t t
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTratamientoUsingPUT(c?: string, i?: string, idConExt?: number, l?: string, m?: string, o?: string, r?: string, t?: string, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateTratamientoUsingPUT(c?: string, i?: string, idConExt?: number, l?: string, m?: string, o?: string, r?: string, t?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateTratamientoUsingPUT(c?: string, i?: string, idConExt?: number, l?: string, m?: string, o?: string, r?: string, t?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateTratamientoUsingPUT(c?: string, i?: string, idConExt?: number, l?: string, m?: string, o?: string, r?: string, t?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (c !== undefined && c !== null) {
            queryParameters = queryParameters.set('c', <any>c);
        }
        if (i !== undefined && i !== null) {
            queryParameters = queryParameters.set('i', <any>i);
        }
        if (idConExt !== undefined && idConExt !== null) {
            queryParameters = queryParameters.set('idConExt', <any>idConExt);
        }
        if (l !== undefined && l !== null) {
            queryParameters = queryParameters.set('l', <any>l);
        }
        if (m !== undefined && m !== null) {
            queryParameters = queryParameters.set('m', <any>m);
        }
        if (o !== undefined && o !== null) {
            queryParameters = queryParameters.set('o', <any>o);
        }
        if (r !== undefined && r !== null) {
            queryParameters = queryParameters.set('r', <any>r);
        }
        if (t !== undefined && t !== null) {
            queryParameters = queryParameters.set('t', <any>t);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/consultaExterna/updateTratamiento`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
