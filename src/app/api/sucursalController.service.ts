/**
 * Proyecto TDS Backend
 * Descripci√≥n
 *
 * OpenAPI spec version: 2.0
 * Contact: info@tecazuay.edu.ec
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { GenericResponseListSucursal } from '../model/genericResponseListSucursal';
import { GenericResponsestring } from '../model/genericResponsestring';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SucursalControllerService {

    protected basePath = '//localhost:8080/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getAllSucursales
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSucursalesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<GenericResponseListSucursal>;
    public getAllSucursalesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponseListSucursal>>;
    public getAllSucursalesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponseListSucursal>>;
    public getAllSucursalesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponseListSucursal>('get',`${this.basePath}/sucursal/getAllSucursales`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveSucursal
     * 
     * @param correoSuc 
     * @param direccionSuc 
     * @param farmaciaIdEmpleado 
     * @param farmaciaIdFarmacia 
     * @param farmaciaIdProducto 
     * @param farmaciaSucursalCorreoSuc 
     * @param farmaciaSucursalDireccionSuc 
     * @param farmaciaSucursalIdSucursal 
     * @param farmaciaSucursalNombreSuc 
     * @param farmaciaSucursalTelefonoSuc 
     * @param idSucursal 
     * @param nombreSuc 
     * @param telefonoSuc 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveSucursalUsingPOST(correoSuc?: string, direccionSuc?: string, farmaciaIdEmpleado?: number, farmaciaIdFarmacia?: number, farmaciaIdProducto?: number, farmaciaSucursalCorreoSuc?: string, farmaciaSucursalDireccionSuc?: string, farmaciaSucursalIdSucursal?: number, farmaciaSucursalNombreSuc?: string, farmaciaSucursalTelefonoSuc?: number, idSucursal?: number, nombreSuc?: string, telefonoSuc?: number, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public saveSucursalUsingPOST(correoSuc?: string, direccionSuc?: string, farmaciaIdEmpleado?: number, farmaciaIdFarmacia?: number, farmaciaIdProducto?: number, farmaciaSucursalCorreoSuc?: string, farmaciaSucursalDireccionSuc?: string, farmaciaSucursalIdSucursal?: number, farmaciaSucursalNombreSuc?: string, farmaciaSucursalTelefonoSuc?: number, idSucursal?: number, nombreSuc?: string, telefonoSuc?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public saveSucursalUsingPOST(correoSuc?: string, direccionSuc?: string, farmaciaIdEmpleado?: number, farmaciaIdFarmacia?: number, farmaciaIdProducto?: number, farmaciaSucursalCorreoSuc?: string, farmaciaSucursalDireccionSuc?: string, farmaciaSucursalIdSucursal?: number, farmaciaSucursalNombreSuc?: string, farmaciaSucursalTelefonoSuc?: number, idSucursal?: number, nombreSuc?: string, telefonoSuc?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public saveSucursalUsingPOST(correoSuc?: string, direccionSuc?: string, farmaciaIdEmpleado?: number, farmaciaIdFarmacia?: number, farmaciaIdProducto?: number, farmaciaSucursalCorreoSuc?: string, farmaciaSucursalDireccionSuc?: string, farmaciaSucursalIdSucursal?: number, farmaciaSucursalNombreSuc?: string, farmaciaSucursalTelefonoSuc?: number, idSucursal?: number, nombreSuc?: string, telefonoSuc?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (correoSuc !== undefined && correoSuc !== null) {
            queryParameters = queryParameters.set('correoSuc', <any>correoSuc);
        }
        if (direccionSuc !== undefined && direccionSuc !== null) {
            queryParameters = queryParameters.set('direccionSuc', <any>direccionSuc);
        }
        if (farmaciaIdEmpleado !== undefined && farmaciaIdEmpleado !== null) {
            queryParameters = queryParameters.set('farmacia.idEmpleado', <any>farmaciaIdEmpleado);
        }
        if (farmaciaIdFarmacia !== undefined && farmaciaIdFarmacia !== null) {
            queryParameters = queryParameters.set('farmacia.idFarmacia', <any>farmaciaIdFarmacia);
        }
        if (farmaciaIdProducto !== undefined && farmaciaIdProducto !== null) {
            queryParameters = queryParameters.set('farmacia.idProducto', <any>farmaciaIdProducto);
        }
        if (farmaciaSucursalCorreoSuc !== undefined && farmaciaSucursalCorreoSuc !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.correoSuc', <any>farmaciaSucursalCorreoSuc);
        }
        if (farmaciaSucursalDireccionSuc !== undefined && farmaciaSucursalDireccionSuc !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.direccionSuc', <any>farmaciaSucursalDireccionSuc);
        }
        if (farmaciaSucursalIdSucursal !== undefined && farmaciaSucursalIdSucursal !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.idSucursal', <any>farmaciaSucursalIdSucursal);
        }
        if (farmaciaSucursalNombreSuc !== undefined && farmaciaSucursalNombreSuc !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.nombreSuc', <any>farmaciaSucursalNombreSuc);
        }
        if (farmaciaSucursalTelefonoSuc !== undefined && farmaciaSucursalTelefonoSuc !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.telefonoSuc', <any>farmaciaSucursalTelefonoSuc);
        }
        if (idSucursal !== undefined && idSucursal !== null) {
            queryParameters = queryParameters.set('idSucursal', <any>idSucursal);
        }
        if (nombreSuc !== undefined && nombreSuc !== null) {
            queryParameters = queryParameters.set('nombreSuc', <any>nombreSuc);
        }
        if (telefonoSuc !== undefined && telefonoSuc !== null) {
            queryParameters = queryParameters.set('telefonoSuc', <any>telefonoSuc);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('post',`${this.basePath}/sucursal/saveSucursal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateSucursal
     * 
     * @param correoSuc 
     * @param direccionSuc 
     * @param farmaciaIdEmpleado 
     * @param farmaciaIdFarmacia 
     * @param farmaciaIdProducto 
     * @param farmaciaSucursalCorreoSuc 
     * @param farmaciaSucursalDireccionSuc 
     * @param farmaciaSucursalIdSucursal 
     * @param farmaciaSucursalNombreSuc 
     * @param farmaciaSucursalTelefonoSuc 
     * @param idSucursal 
     * @param nombreSuc 
     * @param telefonoSuc 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSucursalUsingPUT(correoSuc?: string, direccionSuc?: string, farmaciaIdEmpleado?: number, farmaciaIdFarmacia?: number, farmaciaIdProducto?: number, farmaciaSucursalCorreoSuc?: string, farmaciaSucursalDireccionSuc?: string, farmaciaSucursalIdSucursal?: number, farmaciaSucursalNombreSuc?: string, farmaciaSucursalTelefonoSuc?: number, idSucursal?: number, nombreSuc?: string, telefonoSuc?: number, observe?: 'body', reportProgress?: boolean): Observable<GenericResponsestring>;
    public updateSucursalUsingPUT(correoSuc?: string, direccionSuc?: string, farmaciaIdEmpleado?: number, farmaciaIdFarmacia?: number, farmaciaIdProducto?: number, farmaciaSucursalCorreoSuc?: string, farmaciaSucursalDireccionSuc?: string, farmaciaSucursalIdSucursal?: number, farmaciaSucursalNombreSuc?: string, farmaciaSucursalTelefonoSuc?: number, idSucursal?: number, nombreSuc?: string, telefonoSuc?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponsestring>>;
    public updateSucursalUsingPUT(correoSuc?: string, direccionSuc?: string, farmaciaIdEmpleado?: number, farmaciaIdFarmacia?: number, farmaciaIdProducto?: number, farmaciaSucursalCorreoSuc?: string, farmaciaSucursalDireccionSuc?: string, farmaciaSucursalIdSucursal?: number, farmaciaSucursalNombreSuc?: string, farmaciaSucursalTelefonoSuc?: number, idSucursal?: number, nombreSuc?: string, telefonoSuc?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponsestring>>;
    public updateSucursalUsingPUT(correoSuc?: string, direccionSuc?: string, farmaciaIdEmpleado?: number, farmaciaIdFarmacia?: number, farmaciaIdProducto?: number, farmaciaSucursalCorreoSuc?: string, farmaciaSucursalDireccionSuc?: string, farmaciaSucursalIdSucursal?: number, farmaciaSucursalNombreSuc?: string, farmaciaSucursalTelefonoSuc?: number, idSucursal?: number, nombreSuc?: string, telefonoSuc?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (correoSuc !== undefined && correoSuc !== null) {
            queryParameters = queryParameters.set('correoSuc', <any>correoSuc);
        }
        if (direccionSuc !== undefined && direccionSuc !== null) {
            queryParameters = queryParameters.set('direccionSuc', <any>direccionSuc);
        }
        if (farmaciaIdEmpleado !== undefined && farmaciaIdEmpleado !== null) {
            queryParameters = queryParameters.set('farmacia.idEmpleado', <any>farmaciaIdEmpleado);
        }
        if (farmaciaIdFarmacia !== undefined && farmaciaIdFarmacia !== null) {
            queryParameters = queryParameters.set('farmacia.idFarmacia', <any>farmaciaIdFarmacia);
        }
        if (farmaciaIdProducto !== undefined && farmaciaIdProducto !== null) {
            queryParameters = queryParameters.set('farmacia.idProducto', <any>farmaciaIdProducto);
        }
        if (farmaciaSucursalCorreoSuc !== undefined && farmaciaSucursalCorreoSuc !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.correoSuc', <any>farmaciaSucursalCorreoSuc);
        }
        if (farmaciaSucursalDireccionSuc !== undefined && farmaciaSucursalDireccionSuc !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.direccionSuc', <any>farmaciaSucursalDireccionSuc);
        }
        if (farmaciaSucursalIdSucursal !== undefined && farmaciaSucursalIdSucursal !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.idSucursal', <any>farmaciaSucursalIdSucursal);
        }
        if (farmaciaSucursalNombreSuc !== undefined && farmaciaSucursalNombreSuc !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.nombreSuc', <any>farmaciaSucursalNombreSuc);
        }
        if (farmaciaSucursalTelefonoSuc !== undefined && farmaciaSucursalTelefonoSuc !== null) {
            queryParameters = queryParameters.set('farmacia.sucursal.telefonoSuc', <any>farmaciaSucursalTelefonoSuc);
        }
        if (idSucursal !== undefined && idSucursal !== null) {
            queryParameters = queryParameters.set('idSucursal', <any>idSucursal);
        }
        if (nombreSuc !== undefined && nombreSuc !== null) {
            queryParameters = queryParameters.set('nombreSuc', <any>nombreSuc);
        }
        if (telefonoSuc !== undefined && telefonoSuc !== null) {
            queryParameters = queryParameters.set('telefonoSuc', <any>telefonoSuc);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GenericResponsestring>('put',`${this.basePath}/sucursal/updateSucursal`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
